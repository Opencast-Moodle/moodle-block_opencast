{"version":3,"file":"block_massaction.min.js","sources":["../src/block_massaction.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript module to instantiate the Mass-Action functionality.\n *\n * @module     block_opencast\n * @copyright  2024 Farbod Zamani Boroujeni (elan e.V.) (zamani@elan-ev.de)\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport * as str from 'core/str';\nimport Notification from 'core/notification';\nimport ModalSaveCancel from 'core/modal_save_cancel';\nimport ModalEvents from 'core/modal_events';\nimport url from 'core/url';\n\n/**\n * Initializes the mass action functionality for the Opencast block.\n * This function sets up event listeners for dropdown changes, handles video selection,\n * and manages the modal dialogs for different actions.\n *\n * @param {number} courseid - The ID of the current course.\n * @param {number} ocinstanceid - The ID of the Opencast instance.\n * @param {Object} selectors - An object containing CSS/Id selectors for various elements.\n * @param {string} selectors.dropdown - Selector for the action dropdown elements.\n * @param {string} selectors.selectitem - Selector for the checkbox elements to select individual videos.\n * @param {string} selectors.actionmapping - Selector for the element containing action mapping data.\n * @param {string} selectors.selectall - Selector for the \"select all\" checkbox.\n * @returns {void} This function does not return a value.\n */\nexport const init = (courseid, ocinstanceid, selectors) => {\n\n    const dropdowns = [...document.querySelectorAll(selectors.dropdown)];\n    dropdowns.forEach(dropdown => {\n        dropdown.addEventListener('change', e => {\n            const element = e.currentTarget;\n            const id = element.getAttribute('id');\n            const action = element.value;\n\n            // Make sure other bulk select get the same value.\n            const populatedselector = `${selectors.dropdown}:not(#${id})`;\n            const otherdropdowns = [...document.querySelectorAll(populatedselector)];\n            if (otherdropdowns.length) {\n                otherdropdowns.forEach(otherdropdown => {\n                    otherdropdown.value = action;\n                });\n            }\n\n            if (action === '') {\n                return;\n            }\n\n            const selectedvideos = [...document.querySelectorAll(`${selectors.selectitem}:checked`)];\n            if (!selectedvideos.length) {\n                return;\n            }\n            const selectedids = selectedvideos.map(element => element.id.substring(7));\n            const selectedtitles = selectedvideos.map(element => element.name.substring(7));\n\n            const actionsmappinginput = document.getElementById(selectors.actionmapping);\n            const actionsmappingraw = actionsmappinginput ? actionsmappinginput.value : null;\n            if (actionsmappingraw === null) {\n                return;\n            }\n            const actionsmapping = JSON.parse(actionsmappingraw);\n            // Make sure that the action url is there.\n            if (!actionsmapping?.[action]?.path?.url) {\n                return;\n            }\n\n            // Because of using Modal for start workflow tasks, we don't provide a confirmation modal beforehand,\n            // but instead we provide the confirmation texts in existing startworkflow modal.\n            if (action === 'startworkflow') {\n\n                const data = {\n                    type: 'bulk',\n                    selectedids: selectedids,\n                    selectedtitles: selectedtitles,\n                    url: actionsmapping[action].path.url\n                };\n\n                // Create and dispatch the custom event on start-workflow element with detail data.\n                const event = new CustomEvent('click', {detail: data});\n                document.querySelector('.start-workflow').dispatchEvent(event);\n                return; // We stop the function here!\n            }\n\n            const stringskeys = [\n                {\n                    key: 'videostable_massaction_' + action + '_modal_title',\n                    component: 'block_opencast'\n                },\n                {\n                    key: 'videostable_massaction_' + action + '_modal_body',\n                    component: 'block_opencast',\n                    param: selectedtitles.join('</li><li>')\n                },\n                {\n                    key: 'videostable_massaction_' + action,\n                    component: 'block_opencast'\n                },\n            ];\n            const strPromise = str.get_strings(stringskeys);\n\n            const modalPromise = ModalSaveCancel.create({});\n\n            var urlParams = {\n                'ocinstanceid': ocinstanceid,\n                'courseid': courseid\n            };\n\n            if (actionsmapping[action].path?.params) {\n                urlParams = Object.assign(urlParams, actionsmapping[action].path.params);\n            }\n\n            const actionUrl = url.relativeUrl(actionsmapping[action].path.url, urlParams);\n\n            $.when(strPromise, modalPromise).then(function(strings, modal) {\n                // Pause the live update if it is running.\n                window.liveUpdateState = 'paused';\n                modal.setTitle(strings[0]);\n                var body = '<form id=\"mass_action_confirmation_form\" method=\"post\" action=\"' + actionUrl + '\">';\n                body += '<p>' + strings[1] + '</p>';\n                for (let selectedid of selectedids) {\n                    body += '<input type=\"hidden\" name=\"videoids[]\" value=\"' + selectedid + '\">';\n                }\n                body += '<input type=\"hidden\" name=\"ismassaction\" value=\"1\">';\n                body += '</form>';\n                modal.setBody(body);\n                modal.setSaveButtonText(strings[2]);\n                modal.getRoot().on(ModalEvents.save, function() {\n                    // Resume the live update if it was paused.\n                    window.liveUpdateState = 'resumed';\n                    document.getElementById('mass_action_confirmation_form').submit();\n                });\n                modal.getRoot().on(ModalEvents.hidden, function() {\n                    // Resume the live update if it was paused.\n                    window.liveUpdateState = 'resumed';\n                    // Destroy when hidden/closed.\n                    modal.destroy();\n                    // Change the bulk action select back to choose...\n                    resetVideosTableBulkActions(selectors);\n                });\n                modal.show();\n                return modal;\n            }).fail(Notification.exception);\n        });\n    });\n};\n\n/**\n * Resets the bulk action select dropdowns and unchecks the select items.\n * This function is called when the modal is hidden/closed.\n *\n * @param {Object} selectors - An object containing CSS/Id selectors for various elements.\n * @param {string} selectors.dropdown - Selector for the action dropdown elements.\n * @param {string} selectors.selectitem - Selector for the checkbox elements to select individual videos.\n * @param {string} selectors.actionmapping - Selector for the element containing action mapping data.\n * @param {string} selectors.selectall - Selector for the \"select all\" checkbox.\n * @returns {void} This function does not return a value.\n */\nconst resetVideosTableBulkActions = (selectors) => {\n    const dropdowns = [...document.querySelectorAll(selectors.dropdown)];\n    dropdowns.forEach(dropdown => {\n        dropdown.value = '';\n        dropdown.setAttribute('disabled', true);\n    });\n\n    const ckinputs = [...document.querySelectorAll(`${selectors.selectall}, ${selectors.selectitem}`)];\n    ckinputs.forEach(input => {\n        input.checked = false;\n    });\n};\n"],"names":["courseid","ocinstanceid","selectors","document","querySelectorAll","dropdown","forEach","addEventListener","e","element","currentTarget","id","getAttribute","action","value","populatedselector","otherdropdowns","length","otherdropdown","selectedvideos","selectitem","selectedids","map","substring","selectedtitles","name","actionsmappinginput","getElementById","actionmapping","actionsmappingraw","actionsmapping","JSON","parse","_actionsmapping$actio","path","_actionsmapping$actio2","url","data","type","event","CustomEvent","detail","querySelector","dispatchEvent","stringskeys","key","component","param","join","strPromise","str","get_strings","modalPromise","ModalSaveCancel","create","urlParams","_actionsmapping$actio3","params","Object","assign","actionUrl","relativeUrl","when","then","strings","modal","window","liveUpdateState","setTitle","body","selectedid","setBody","setSaveButtonText","getRoot","on","ModalEvents","save","submit","hidden","destroy","resetVideosTableBulkActions","show","fail","Notification","exception","setAttribute","selectall","input","checked"],"mappings":";;;;;;;s+BA4CoB,CAACA,SAAUC,aAAcC,aAEvB,IAAIC,SAASC,iBAAiBF,UAAUG,WAChDC,SAAQD,WACdA,SAASE,iBAAiB,UAAUC,kFAC1BC,QAAUD,EAAEE,cACZC,GAAKF,QAAQG,aAAa,MAC1BC,OAASJ,QAAQK,MAGjBC,4BAAuBb,UAAUG,0BAAiBM,QAClDK,eAAiB,IAAIb,SAASC,iBAAiBW,uBACjDC,eAAeC,QACfD,eAAeV,SAAQY,gBACnBA,cAAcJ,MAAQD,UAIf,KAAXA,oBAIEM,eAAiB,IAAIhB,SAASC,2BAAoBF,UAAUkB,6BAC7DD,eAAeF,oBAGdI,YAAcF,eAAeG,KAAIb,SAAWA,QAAQE,GAAGY,UAAU,KACjEC,eAAiBL,eAAeG,KAAIb,SAAWA,QAAQgB,KAAKF,UAAU,KAEtEG,oBAAsBvB,SAASwB,eAAezB,UAAU0B,eACxDC,kBAAoBH,oBAAsBA,oBAAoBZ,MAAQ,QAClD,OAAtBe,+BAGEC,eAAiBC,KAAKC,MAAMH,sBAE7BC,MAAAA,8CAAAA,eAAiBjB,yEAAjBoB,sBAA0BC,yCAA1BC,uBAAgCC,cAMtB,kBAAXvB,OAA4B,OAEtBwB,KAAO,CACTC,KAAM,OACNjB,YAAaA,YACbG,eAAgBA,eAChBY,IAAKN,eAAejB,QAAQqB,KAAKE,KAI/BG,MAAQ,IAAIC,YAAY,QAAS,CAACC,OAAQJ,mBAChDlC,SAASuC,cAAc,mBAAmBC,cAAcJ,aAItDK,YAAc,CAChB,CACIC,IAAK,0BAA4BhC,OAAS,eAC1CiC,UAAW,kBAEf,CACID,IAAK,0BAA4BhC,OAAS,cAC1CiC,UAAW,iBACXC,MAAOvB,eAAewB,KAAK,cAE/B,CACIH,IAAK,0BAA4BhC,OACjCiC,UAAW,mBAGbG,WAAaC,IAAIC,YAAYP,aAE7BQ,aAAeC,2BAAgBC,OAAO,QAExCC,UAAY,cACItD,sBACJD,yCAGZ8B,eAAejB,QAAQqB,wCAAvBsB,uBAA6BC,SAC7BF,UAAYG,OAAOC,OAAOJ,UAAWzB,eAAejB,QAAQqB,KAAKuB,eAG/DG,UAAYxB,aAAIyB,YAAY/B,eAAejB,QAAQqB,KAAKE,IAAKmB,2BAEjEO,KAAKb,WAAYG,cAAcW,MAAK,SAASC,QAASC,OAEpDC,OAAOC,gBAAkB,SACzBF,MAAMG,SAASJ,QAAQ,QACnBK,KAAO,kEAAoET,UAAY,KAC3FS,MAAQ,MAAQL,QAAQ,GAAK,WACxB,IAAIM,cAAcjD,YACnBgD,MAAQ,iDAAmDC,WAAa,YAE5ED,MAAQ,sDACRA,MAAQ,UACRJ,MAAMM,QAAQF,MACdJ,MAAMO,kBAAkBR,QAAQ,IAChCC,MAAMQ,UAAUC,GAAGC,sBAAYC,MAAM,WAEjCV,OAAOC,gBAAkB,UACzBhE,SAASwB,eAAe,iCAAiCkD,YAE7DZ,MAAMQ,UAAUC,GAAGC,sBAAYG,QAAQ,WAEnCZ,OAAOC,gBAAkB,UAEzBF,MAAMc,UAENC,4BAA4B9E,cAEhC+D,MAAMgB,OACChB,SACRiB,KAAKC,sBAAaC,wBAgB3BJ,4BAA+B9E,YACf,IAAIC,SAASC,iBAAiBF,UAAUG,WAChDC,SAAQD,WACdA,SAASS,MAAQ,GACjBT,SAASgF,aAAa,YAAY,MAGrB,IAAIlF,SAASC,2BAAoBF,UAAUoF,uBAAcpF,UAAUkB,cAC3Ed,SAAQiF,QACbA,MAAMC,SAAU"}