{"version":3,"file":"block_massaction.min.js","sources":["../src/block_massaction.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript module to instantiate the Mass-Action functionality.\n *\n * @module     block_opencast\n * @copyright  2024 Farbod Zamani Boroujeni (elan e.V.) (zamani@elan-ev.de)\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport * as str from 'core/str';\nimport Notification from 'core/notification';\nimport ModalSaveCancel from 'core/modal_save_cancel';\nimport ModalEvents from 'core/modal_events';\nimport url from 'core/url';\n\n/**\n * Initializes the mass action functionality for the Opencast block.\n * This function sets up event listeners for dropdown changes, handles video selection,\n * and manages the modal dialogs for different actions.\n *\n * @param {number} courseid - The ID of the current course.\n * @param {number} ocinstanceid - The ID of the Opencast instance.\n * @param {Object} selectors - An object containing CSS/Id selectors for various elements.\n * @param {string} selectors.dropdown - Selector for the action dropdown elements.\n * @param {string} selectors.selectitem - Selector for the checkbox elements to select individual videos.\n * @param {string} selectors.actionmapping - Selector for the element containing action mapping data.\n * @param {string} selectors.selectall - Selector for the \"select all\" checkbox.\n * @param {string} selectors.container - Selector for the table wrapper container div,\n *                                      which should also contains the massaction dropdowns.\n * @returns {void} This function does not return a value.\n */\nexport const init = (courseid, ocinstanceid, selectors) => {\n\n    // Fix toggle group data for mass action elements.\n    fixToggleGroups(selectors);\n\n    // Loop through dropdowns.\n    const dropdowns = [...document.querySelectorAll(selectors.dropdown)];\n    dropdowns.forEach(dropdown => {\n        dropdown.addEventListener('change', e => {\n            const element = e.currentTarget;\n            const id = element.getAttribute('id');\n            const action = element.value;\n\n            // Make sure other bulk select get the same value.\n            const parentcontainer = element.closest(selectors.container);\n            let container = document;\n            if (parentcontainer) {\n                container = parentcontainer;\n            }\n            const populatedselector = `${selectors.dropdown}:not(#${id})`;\n            const otherdropdowns = [...container.querySelectorAll(populatedselector)];\n            if (otherdropdowns.length) {\n                otherdropdowns.forEach(otherdropdown => {\n                    otherdropdown.value = action;\n                });\n            }\n\n            if (action === '') {\n                return;\n            }\n\n            const selectedvideos = [...container.querySelectorAll(`${selectors.selectitem}:checked`)];\n            if (!selectedvideos.length) {\n                return;\n            }\n            const selectedids = selectedvideos.map(element => element.id.substring(7));\n            const selectedtitles = selectedvideos.map(element => element.name.substring(7));\n\n            const actionsmappinginput = container.querySelector(`input[name=${selectors.actionmapping}]`);\n            const actionsmappingraw = actionsmappinginput ? actionsmappinginput.value : null;\n            if (actionsmappingraw === null) {\n                return;\n            }\n            const actionsmapping = JSON.parse(actionsmappingraw);\n            // Make sure that the action url is there.\n            if (!actionsmapping?.[action]?.path?.url) {\n                return;\n            }\n\n            // Because of using Modal for start workflow tasks, we don't provide a confirmation modal beforehand,\n            // but instead we provide the confirmation texts in existing startworkflow modal.\n            if (action === 'startworkflow') {\n\n                const data = {\n                    type: 'bulk',\n                    selectedids: selectedids,\n                    selectedtitles: selectedtitles,\n                    url: actionsmapping[action].path.url,\n                    container: container\n                };\n\n                // Create and dispatch the custom event on start-workflow element with detail data.\n                const event = new CustomEvent('click', {detail: data});\n                container.querySelector('.start-workflow').dispatchEvent(event);\n                return; // We stop the function here!\n            }\n\n            const stringskeys = [\n                {\n                    key: 'videostable_massaction_' + action + '_modal_title',\n                    component: 'block_opencast'\n                },\n                {\n                    key: 'videostable_massaction_' + action + '_modal_body',\n                    component: 'block_opencast',\n                    param: selectedtitles.join('</li><li>')\n                },\n                {\n                    key: 'videostable_massaction_' + action,\n                    component: 'block_opencast'\n                },\n            ];\n            const strPromise = str.get_strings(stringskeys);\n\n            const modalPromise = ModalSaveCancel.create({});\n\n            var urlParams = {\n                'ocinstanceid': ocinstanceid,\n                'courseid': courseid\n            };\n\n            if (actionsmapping[action].path?.params) {\n                urlParams = Object.assign(urlParams, actionsmapping[action].path.params);\n            }\n\n            const actionUrl = url.relativeUrl(actionsmapping[action].path.url, urlParams);\n\n            $.when(strPromise, modalPromise).then(function(strings, modal) {\n                // Pause the live update if it is running.\n                window.liveUpdateState = 'paused';\n                modal.setTitle(strings[0]);\n                var body = '<form id=\"mass_action_confirmation_form\" method=\"post\" action=\"' + actionUrl + '\">';\n                body += '<p>' + strings[1] + '</p>';\n                for (let selectedid of selectedids) {\n                    body += '<input type=\"hidden\" name=\"videoids[]\" value=\"' + selectedid + '\">';\n                }\n                body += '<input type=\"hidden\" name=\"ismassaction\" value=\"1\">';\n                body += '</form>';\n                modal.setBody(body);\n                modal.setSaveButtonText(strings[2]);\n                modal.getRoot().on(ModalEvents.save, function() {\n                    // Resume the live update if it was paused.\n                    window.liveUpdateState = 'resumed';\n                    document.getElementById('mass_action_confirmation_form').submit();\n                });\n                modal.getRoot().on(ModalEvents.hidden, function() {\n                    // Resume the live update if it was paused.\n                    window.liveUpdateState = 'resumed';\n                    // Destroy when hidden/closed.\n                    modal.destroy();\n                    // Change the bulk action select back to choose...\n                    resetVideosTableBulkActions(selectors, container);\n                });\n                modal.show();\n                return modal;\n            }).fail(Notification.exception);\n        });\n    });\n};\n\n/**\n * Resets the bulk action select dropdowns.\n * This function is called when the modal is hidden/closed.\n *\n * @param {Object} selectors - An object containing CSS/Id selectors for various elements.\n * @param {string} selectors.dropdown - Selector for the action dropdown elements.\n * @param {string} selectors.selectitem - Selector for the checkbox elements to select individual videos.\n * @param {string} selectors.actionmapping - Selector for the element containing action mapping data.\n * @param {string} selectors.selectall - Selector for the \"select all\" checkbox.\n * @param {Object} container - The container element as the parent element.\n * @param {boolean} disabled a flag to set the dropdown attribute upon using the function (default to false).\n * @returns {void} This function does not return a value.\n */\nconst resetVideosTableBulkActions = (selectors, container, disabled = false) => {\n    const dropdowns = [...container.querySelectorAll(selectors.dropdown)];\n    dropdowns.forEach(dropdown => {\n        dropdown.value = '';\n        dropdown.disabled = disabled;\n    });\n};\n\n/**\n * Fixes the toggle groups for the selections.\n * The main reason to do this here is to make sure that mass action feature works when multiple tables are in a page.\n *\n * This function looks for the table wrapper div container and takes its child table id and inject the id as tooglegroup data to\n * the its child elements such as dropdowns select-all and select-single checkboxes.\n *\n * @param {Object} selectors - An object containing CSS/Id selectors for various elements.\n * @param {string} selectors.dropdown - Selector for the action dropdown elements.\n * @param {string} selectors.selectitem - Selector for the checkbox elements to select individual videos.\n * @param {string} selectors.actionmapping - Selector for the element containing action mapping data.\n * @param {string} selectors.selectall - Selector for the \"select all\" checkbox.\n * @returns {void} This function does not return a value.\n */\nconst fixToggleGroups = (selectors) => {\n    const containers = [...document.querySelectorAll(selectors.container)];\n    containers.forEach(container => {\n        // Take the table.\n        const table = container.querySelector('table.opencast-videos-table');\n        // Extract the table id.\n        const tableid = table?.id;\n        if (!tableid) {\n            // Do nothing if no table id found to avoid misleading errors.\n            return;\n        }\n\n        // Find the dropdown children and adjust their togglegroup data.\n        const dropdowns = [...container.querySelectorAll(selectors.dropdown)];\n        dropdowns.forEach(dropdown => {\n            dropdown.dataset.togglegroup = tableid;\n            dropdown.setAttribute('data-togglegroup', tableid);\n        });\n\n        // Find the select-all checkbox child(ren) and adjust their togglegroup data.\n        const selectalls = [...container.querySelectorAll(selectors.selectall)];\n        selectalls.forEach(selectall => {\n            selectall.dataset.togglegroup = tableid;\n            selectall.setAttribute('data-togglegroup', tableid);\n        });\n\n        // Find the select-items checkbox children and adjust their togglegroup data.\n        const selectitems = [...container.querySelectorAll(selectors.selectitem)];\n        selectitems.forEach(selectitem => {\n            selectitem.dataset.togglegroup = tableid;\n            selectitem.setAttribute('data-togglegroup', tableid);\n        });\n    });\n};\n"],"names":["courseid","ocinstanceid","selectors","fixToggleGroups","document","querySelectorAll","dropdown","forEach","addEventListener","e","element","currentTarget","id","getAttribute","action","value","parentcontainer","closest","container","populatedselector","otherdropdowns","length","otherdropdown","selectedvideos","selectitem","selectedids","map","substring","selectedtitles","name","actionsmappinginput","querySelector","actionmapping","actionsmappingraw","actionsmapping","JSON","parse","_actionsmapping$actio","path","_actionsmapping$actio2","url","data","type","event","CustomEvent","detail","dispatchEvent","stringskeys","key","component","param","join","strPromise","str","get_strings","modalPromise","ModalSaveCancel","create","urlParams","_actionsmapping$actio3","params","Object","assign","actionUrl","relativeUrl","when","then","strings","modal","window","liveUpdateState","setTitle","body","selectedid","setBody","setSaveButtonText","getRoot","on","ModalEvents","save","getElementById","submit","hidden","destroy","resetVideosTableBulkActions","show","fail","Notification","exception","disabled","dropdowns","table","tableid","dataset","togglegroup","setAttribute","selectall"],"mappings":"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"}