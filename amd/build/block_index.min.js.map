{"version":3,"file":"block_index.min.js","sources":["../src/block_index.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript to initialise the opencast block.\n *\n * @module     block_opencast\n * @copyright  2021 Tamara Gunkel, University of MÃ¼nster\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/modal_factory', 'core/modal_events',\n    'core/str', 'core/url', 'core/notification', 'core/toast', 'core/ajax'],\n    function($, ModalFactory, ModalEvents, str, url, Notification, Toast, Ajax) {\n        /**\n         * Instantiate the window variable in order to work with Intervals\n         *\n         */\n        window.liveUpdateInterval = null;\n        window.liveUpdateItemsWithError = [];\n        window.liveUpdateState = null;\n\n        var pauseLiveUpdate = function(liveupdate) {\n            if (!liveupdate.enabled) {\n                return;\n            }\n            if (window.liveUpdateInterval !== null) {\n                clearInterval(window.liveUpdateInterval);\n                window.liveUpdateState = 'paused';\n            }\n        };\n\n        var resumeLiveUpdate = function(ocinstanceid, contextid, liveupdate) {\n            if (!liveupdate.enabled) {\n                return;\n            }\n            if (window.liveUpdateState == 'paused') {\n                initLiveUpdate(ocinstanceid, contextid, liveupdate.timeout);\n                window.liveUpdateState = 'resumed';\n            }\n        };\n\n        var initWorkflowModal = function(ocinstanceid, courseid, langstrings, contextid, liveupdate) {\n            if (document.getElementById('workflowsjson')) {\n                var workflows = JSON.parse($('#workflowsjson').text());\n                var privacyinfohtml = null;\n                var privacytitle = null;\n                var privacyworkflows = null;\n                var hasprivacyinfo = false;\n                if (document.getElementById('workflowprivacynotice')) {\n                    hasprivacyinfo = true;\n                    privacyinfohtml = $('#swprivacynoticeinfotext').html();\n                    privacytitle = $('#swprivacynoticetitle').text();\n                    privacyworkflows = JSON.parse($('#swprivacynoticewfds').text());\n                }\n\n                $('.start-workflow').on('click', function(e) {\n                    e.preventDefault();\n                    const detail = e?.detail || {};\n\n                    var clickedVideo = $(e.currentTarget);\n                    var actionurl = url.relativeUrl('blocks/opencast/startworkflow.php', {\n                        'ocinstanceid': ocinstanceid,\n                        'courseid': courseid,\n                        'videoid': clickedVideo.data('id')\n                    });\n                    var ismassaction = false;\n                    var bulkinfodiv = '';\n                    var massactioncontainer = null;\n                    if (detail?.type === 'bulk' && detail?.selectedids && detail?.container) {\n                        ismassaction = true;\n                        massactioncontainer = detail.container;\n                        const table = massactioncontainer.querySelector('table.opencast-videos-table');\n                        const tableid = table?.id;\n                        let seriesid = '';\n                        if (tableid) {\n                            seriesid = tableid.replace('opencast-videos-table-', '');\n                        }\n                        bulkinfodiv = '<div id=\"bulkinfodiv\" class=\"w-100 mb-1\">';\n                        bulkinfodiv += '<p>' + langstrings[12].replace('{$a}', detail.selectedtitles.join('</li><li>')) + '</p>';\n                        bulkinfodiv += '</div>';\n                        for (let videoid of detail.selectedids) {\n                            bulkinfodiv += '<input type=\"hidden\" name=\"videoids[]\" value=\"' + videoid + '\">';\n                        }\n                        bulkinfodiv += '<input type=\"hidden\" name=\"ismassaction\" value=\"1\">';\n                        actionurl = url.relativeUrl(detail.url, {\n                            'ocinstanceid': ocinstanceid,\n                            'courseid': courseid,\n                            'seriesid': seriesid\n                        });\n                    }\n\n                    var select = '<select class=\"custom-select mb-3\" id=\"workflowselect\" name=\"workflow\">';\n\n                    for (let workflow in workflows) {\n                        select += '<option value=\"' + workflow + '\">' + workflows[workflow].title + '</option>';\n                    }\n\n                    select += '</select>';\n\n                    var privacynoticediv = '';\n                    if (hasprivacyinfo) {\n                        privacynoticediv = '<div id=\"privacynoticediv\" class=\"w-100 mb-2 d-none\">';\n                        privacynoticediv += '<strong>' + privacytitle + '</strong>';\n                        privacynoticediv += '<div class=\"pl-1 pr-1\">' + privacyinfohtml + '</div>';\n                        privacynoticediv += '</div>';\n                    }\n\n                    var workflowdescdiv = '<div id=\"workflowdescdiv\" class=\"mb-2 d-none\"><strong>' + langstrings[7] +\n                        '</strong><p class=\"pl-1 pr-1\" id=\"workflowdesc\"></p></div>';\n\n                    var workflowconfigpaneldiv = '<div id=\"workflowconfigpaneldiv\" class=\"d-none\">' +\n                        '<strong>' + langstrings[8] + '</strong>' +\n                        '<iframe id=\"config-frame\" ' +\n                        'class=\"w-100 mh-100 m-0 p-0 border-0\" sandbox=\"allow-forms allow-scripts\">' +\n                        '</iframe><input type=\"hidden\" name=\"configparams\" id=\"configparams\"></div>';\n\n                    var body = '<form id=\"startWorkflowForm\" method=\"post\" action=\"' +\n                        actionurl\n                        + '\"><div class=\"form-group\">' +\n                        bulkinfodiv +\n                        '<p>' + langstrings[6] + '</p>' +\n                        select +\n                        workflowdescdiv +\n                        privacynoticediv +\n                        workflowconfigpaneldiv +\n                        '</div>' +\n                        '</form>';\n\n                    ModalFactory.create({\n                        type: ModalFactory.types.SAVE_CANCEL,\n                        title: ismassaction ? langstrings[13] : langstrings[5],\n                        body: body\n                    }, undefined)\n                        .then(function(modal) {\n                            // Pause the live update if it is running.\n                            pauseLiveUpdate(liveupdate);\n                            modal.setSaveButtonText(langstrings[5]);\n                            var root = modal.getRoot();\n                            root.on(ModalEvents.save, function(e) {\n                                // Handle form submission after receiving data, if the workflow has config panel.\n                                if ($('#config-frame').is(':visible')) {\n                                    document.getElementById('config-frame').contentWindow.postMessage('getdata', '*');\n                                    e.preventDefault();\n                                } else {\n                                    // If the workflow has no config panel, we submit it directly.\n                                    $('#startWorkflowForm').submit();\n                                }\n                            });\n                            root.on(ModalEvents.hidden, function() {\n                                // Resume the live update if it was paused.\n                                resumeLiveUpdate(ocinstanceid, contextid, liveupdate);\n                                // Destroy when hidden/closed.\n                                modal.destroy();\n                                // Change the bulk action select back to choose...\n                                resetVideosTableBulkActions(massactioncontainer);\n                            });\n\n                            // Show description for initial value.\n                            modal.show().then(function() {\n                                const workflowselect = $('#workflowselect');\n                                let workflowid = workflowselect.val();\n                                displayWorkflowDescription(workflows[workflowid]);\n                                displayWorkflowConfigPanel(ocinstanceid, courseid, workflowid);\n                                // The first time to check if the privacy notice must be displayed.\n                                displayWorkflowPrivacyNotice(privacyworkflows, workflowid);\n\n                                // Show workflow description when selected.\n                                workflowselect.change(function() {\n                                    let workflowid = $(this).val();\n                                    displayWorkflowDescription(workflows[workflowid]);\n                                    displayWorkflowConfigPanel(ocinstanceid, courseid, workflowid);\n                                    // After each change, check if the selected workflow has to be displayed.\n                                    displayWorkflowPrivacyNotice(privacyworkflows, workflowid);\n                                });\n                                return;\n                            }).catch(Notification.exception);\n                            return;\n                        }).catch(Notification.exception);\n                });\n            }\n        };\n\n        /**\n         * Helper function to display the privacy notice in workflow modal dialog.\n         * @param {Array} privacyworkflows an array list of workflows to display privacy notice for.\n         * @param {string} workflowid workflow def id\n         */\n        var displayWorkflowPrivacyNotice = function(privacyworkflows, workflowid) {\n            if (Array.isArray(privacyworkflows) && (privacyworkflows.length === 0 || privacyworkflows.includes(workflowid))) {\n                $('#privacynoticediv').removeClass('d-none');\n            } else {\n                $('#privacynoticediv').addClass('d-none');\n            }\n        };\n\n        /**\n         * Helper function to display the description of the workflow.\n         * @param {Object} workflowobj the workflow object\n         */\n        var displayWorkflowDescription = function(workflowobj) {\n            if (workflowobj?.description) {\n                $('#workflowdescdiv').removeClass('d-none');\n                $('#workflowdesc').html(workflowobj.description);\n            } else {\n                $('#workflowdescdiv').addClass('d-none');\n            }\n        };\n\n        /**\n         * Helper function to display Workflow configurration panel.\n         * @param {string} ocinstanceid oc instance id\n         * @param {string} courseid course id\n         * @param {string} workflowid workflow def id\n         */\n        var displayWorkflowConfigPanel = function(ocinstanceid, courseid, workflowid) {\n            $('#workflowconfigpaneldiv').addClass('d-none');\n            $('#workflowconfigpanelloading').removeClass('d-none');\n            $('#config-frame').attr('src', '');\n            var configpanelsrc = url.relativeUrl('blocks/opencast/serveworkflowconfigpanel.php', {\n                'ocinstanceid': ocinstanceid,\n                'courseid': courseid,\n                'workflowid': workflowid\n            });\n            $.ajax({\n                url: configpanelsrc,\n                success: (data) => {\n                    if (data.trim() !== '') {\n                        $('#workflowconfigpaneldiv').removeClass('d-none');\n                        $('#config-frame').attr('src', configpanelsrc);\n                    }\n                },\n                async: false\n            });\n        };\n\n        var initReportModal = function(ocinstanceid, courseid, langstrings, contextid, liveupdate) {\n            $('.report-problem').on('click', function(e) {\n                e.preventDefault();\n                var clickedVideo = $(e.currentTarget);\n                ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: langstrings[0],\n                    body: '<form id=\"reportProblemForm\" method=\"post\" action=\"' +\n                        url.relativeUrl('blocks/opencast/reportproblem.php', {\n                            'ocinstanceid': ocinstanceid,\n                            'courseid': courseid,\n                            'videoid': clickedVideo.data('id')\n                        }) + '\"><div class=\"form-group\">' +\n                        '<label for=\"inputMessage\">' + langstrings[1] + '</label>' +\n                        '<textarea class=\"form-control\" id=\"inputMessage\" name=\"inputMessage\" rows=\"4\" placeholder=\"' +\n                        langstrings[2] + '\">' + '</textarea>' +\n                        '  <div class=\"invalid-feedback d-none\" id=\"messageValidation\">' + langstrings[3] + '</div>' +\n                        '</div></form>'\n                })\n                    .then(function(modal) {\n                        // Pause the live update if it is running.\n                        pauseLiveUpdate(liveupdate);\n                        modal.setSaveButtonText(langstrings[4]);\n                        var root = modal.getRoot();\n                        root.on(ModalEvents.save, function(e) {\n                            if ($('#inputMessage').val()) {\n                                $('#reportProblemForm').submit();\n                            } else {\n                                $('#inputMessage').addClass('is-invalid');\n                                $('#messageValidation').removeClass('d-none');\n                            }\n                            e.preventDefault();\n                        });\n                        root.on(ModalEvents.hidden, function() {\n                            // Resume the live update if it was paused.\n                            resumeLiveUpdate(ocinstanceid, contextid, liveupdate);\n                            // Destroy when hidden/closed.\n                            modal.destroy();\n                        });\n                        modal.show();\n                        return;\n                    }).catch(Notification.exception);\n            });\n        };\n\n        /*\n         * Initialise the status live update in the overview page.\n         */\n        var initLiveUpdate = function(ocinstanceid, contextid, reloadtimeout) {\n            if (window.liveUpdateInterval !== null) {\n                clearInterval(window.liveUpdateInterval);\n            }\n            window.liveUpdateItemsWithError = [];\n            var items = getLiveUpdateItems();\n            if (items.length) {\n                window.liveUpdateInterval = setInterval(function() {\n                    // Adding the state checker here, in order to pause the live update from other js modules like block_massaction.\n                    if (window.liveUpdateState === 'paused') {\n                        return;\n                    }\n                    var processingItems = getLiveUpdateProcessingItems();\n                    var uploadingItems = getLiveUpdateUploadingItems();\n                    if (processingItems.length == 0 && uploadingItems.length == 0) {\n                        clearInterval(window.liveUpdateInterval);\n                        if (window.liveUpdateItemsWithError.length > 0) {\n                            var titles = window.liveUpdateItemsWithError.join('</li><li>');\n                            str.get_string('liveupdate_fail_notification_message', 'block_opencast', titles)\n                                .done(function(result) {\n                                    Notification.addNotification({\n                                        message: result,\n                                        type: 'error'\n                                    });\n                                })\n                                .fail(Notification.exception);\n                        }\n                        return;\n                    }\n                    for (var processingItem of processingItems) {\n                        liveUpdatePerformAjax('processing', ocinstanceid, contextid, processingItem, reloadtimeout);\n                    }\n                    for (var uploadingItem of uploadingItems) {\n                        liveUpdatePerformAjax('uploading', ocinstanceid, contextid, uploadingItem, reloadtimeout);\n                    }\n                }, 5000, ocinstanceid, contextid, url, reloadtimeout);\n            }\n        };\n\n        /*\n         * Gets all status live updates items (flags).\n         */\n        var getLiveUpdateItems = function() {\n            var processingItems = getLiveUpdateProcessingItems();\n            var uploadingItems = getLiveUpdateUploadingItems();\n            return processingItems.concat(uploadingItems);\n        };\n\n        /*\n         * Gets all status live updates items for Processing states.\n         */\n        var getLiveUpdateProcessingItems = function() {\n            var itemsNodeList = document.getElementsByName('liveupdate_processing_item');\n            return Array.from(itemsNodeList);\n        };\n\n        /*\n         * Gets all status live updates items for uploading status.\n         */\n        var getLiveUpdateUploadingItems = function() {\n            var itemsNodeList = document.getElementsByName('liveupdate_uploading_item');\n            return Array.from(itemsNodeList);\n        };\n\n        /*\n         * Perform status live update Ajax call to the backend to get the related info.\n         */\n        var liveUpdatePerformAjax = function(type, ocinstanceid, contextid, item, reloadtimeout) {\n            var identifier = item.value;\n            var title = item?.dataset?.title ? item.dataset.title : '';\n            if (identifier == undefined || title == '') {\n                window.liveUpdateItemsWithError.push(title);\n                item.remove();\n                return;\n            }\n            Ajax.call([{\n                methodname: 'block_opencast_get_liveupdate_info',\n                args: {contextid: contextid, ocinstanceid: ocinstanceid, type: type, identifier: identifier},\n                done: function(status) {\n                    if (status == '') {\n                        window.liveUpdateItemsWithError.push(title);\n                        item.remove();\n                        return;\n                    }\n                    var statusObject = JSON.parse(status);\n                    if (statusObject.replace != '') {\n                        replaceLiveUpdateInfo(item, statusObject.replace);\n                    }\n                    if (statusObject.remove == true) {\n                        item.remove();\n                        var stringparams = {\n                            timeout: reloadtimeout,\n                            title: title\n                        };\n                        str.get_string('liveupdate_toast_notification', 'block_opencast', stringparams)\n                            .done(function(result) {\n                                Toast.add(result);\n                            })\n                            .fail(Notification.exception);\n                        setTimeout(function() {\n                            window.location.reload();\n                        }, reloadtimeout * 1000);\n                    }\n                },\n                fail: function() {\n                    window.liveUpdateItemsWithError.push(title);\n                    item.remove();\n                }\n            }]);\n        };\n\n        /*\n         * Replace the new live update status with the current one for both text and DOM element.\n         */\n        var replaceLiveUpdateInfo = function(item, replace) {\n            if (item == undefined || replace == '' || typeof replace != 'string') {\n                return;\n            }\n            var newDiv = document.createElement('div');\n            newDiv.innerHTML = replace.trim();\n            var replaceElm = newDiv.firstChild;\n            if (replaceElm.nodeName == '#text') {\n                var prevText = item.parentNode.firstChild;\n                prevText.remove();\n                var newText = document.createTextNode(replace.trim());\n                item.parentNode.insertBefore(newText, item);\n            } else if (item.previousElementSibling) {\n                var prevElm = item.previousElementSibling;\n                newDiv.innerHTML = replace.trim();\n                if (!areElementsEqual(replaceElm, prevElm)) {\n                    prevElm.remove();\n                    item.parentNode.insertBefore(replaceElm, item);\n                }\n            }\n        };\n\n        /*\n         * Checks if the liev update DOM elements (new vs old) are equal.\n         */\n        var areElementsEqual = function(baseElm, checkElm) {\n            var isEqual = true;\n            var attributes = baseElm.getAttributeNames();\n            for (var attributeName of attributes) {\n                var baseAttributeValue = baseElm.getAttribute(attributeName).trim();\n                var checkAttributeValue = '';\n                if (checkElm.hasAttribute(attributeName)) {\n                    checkAttributeValue = checkElm.getAttribute(attributeName).trim();\n                }\n                if (checkAttributeValue == '') {\n                    continue;\n                }\n                if (checkAttributeValue != baseAttributeValue) {\n                    isEqual = false;\n                }\n            }\n            return isEqual;\n        };\n\n        /*\n         * Copies the direct access link into the clipboard.\n         */\n        var initCopyAccessLinkToClipboard = function() {\n            $('.access-link-copytoclipboard').on('click', function(e) {\n                e.preventDefault();\n                var element = e.currentTarget;\n                var link = element.getAttribute('href');\n                if (!link) {\n                    str.get_string('directaccess_copy_no_link', 'block_opencast')\n                        .done(function(result) {\n                            Toast.add(result, {type: 'warning'});\n                        })\n                        .fail(Notification.exception);\n                    return;\n                }\n\n                if (navigator.clipboard) {\n                    navigator.clipboard.writeText(link)\n                    .then(() => {\n                        str.get_string('directaccess_copy_success', 'block_opencast')\n                            .done(function(result) {\n                                Toast.add(result);\n                            })\n                            .fail(Notification.exception);\n                        return;\n                    }).catch();\n                    return;\n                } else {\n                    str.get_string('directaccess_copytoclipboard_unavialable', 'block_opencast')\n                        .done(function(result) {\n                            Toast.add(result, {type: 'danger', autohide: false, closeButton: true});\n                        })\n                        .fail(Notification.exception);\n                }\n            });\n        };\n        /*\n         * Initalizes the unarchive uploadjob package on button click with modal.\n         */\n        var initUnarchiveUploadJobModal = function(ocinstanceid, langstrings, contextid, liveupdate) {\n            $('.unarchive-uploadjob').on('click', function(e) {\n                e.preventDefault();\n                var targetBtn = $(e.currentTarget);\n                var uploadjobid = targetBtn.data('id');\n                ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: langstrings[9],\n                    body: langstrings[10]\n                })\n                .then(function(modal) {\n                    // Pause the live update if it is running.\n                    pauseLiveUpdate(liveupdate);\n                    modal.setSaveButtonText(langstrings[11]);\n                    var root = modal.getRoot();\n                    root.on(ModalEvents.save, function (e) {\n                        Ajax.call([{\n                            methodname: 'block_opencast_unarchive_uploadjob',\n                            args: {contextid: contextid, ocinstanceid: ocinstanceid, uploadjobid: uploadjobid},\n                            done: function() {\n                                window.location.reload();\n                            },\n                            fail: Notification.exception\n                        }]);\n                        e.preventDefault();\n                    });\n                    root.on(ModalEvents.hidden, function() {\n                        // Resume the live update if it was paused.\n                        resumeLiveUpdate(ocinstanceid, contextid, liveupdate);\n                        // Destroy when hidden/closed.\n                        modal.destroy();\n                    });\n                    modal.show();\n                    return;\n                })\n                .catch(Notification.exception);\n            });\n        };\n\n        /**\n         * Resets the bulk action select dropdowns.\n         * @param {object} container The wrapper container which contains the dropdowns, table and selection items of massaction.\n         * @param {boolean} disabled a flag to set the dropdown attribute upon using the function (default to false).\n         */\n        var resetVideosTableBulkActions = function (container, disabled = false) {\n            if (!container) {\n                return;\n            }\n            const dropdowns = [...container.querySelectorAll('.opencast-videos-table-massactions')];\n            dropdowns.forEach(dropdown => {\n                dropdown.value = '';\n                dropdown.disabled = disabled;\n            });\n        };\n\n        /*\n         * Initialise all of the modules for the opencast block.\n         */\n        var init = function(courseid, ocinstanceid, contextid, liveupdate) {\n            // Load strings\n            var strings = [\n                {\n                    key: 'reportproblem_modal_title',\n                    component: 'block_opencast'\n                },\n                {\n                    key: 'reportproblem_modal_body',\n                    component: 'block_opencast'\n                },\n                {\n                    key: 'reportproblem_modal_placeholder',\n                    component: 'block_opencast'\n                },\n                {\n                    key: 'reportproblem_modal_required',\n                    component: 'block_opencast'\n                },\n                {\n                    key: 'reportproblem_modal_submit',\n                    component: 'block_opencast'\n                },\n                {\n                    key: 'startworkflow',\n                    component: 'block_opencast'\n                },\n                {\n                    key: 'startworkflow_modal_body',\n                    component: 'block_opencast'\n                },\n                {\n                    key: 'startworkflow_modal_description_title',\n                    component: 'block_opencast'\n                },\n                {\n                    key: 'startworkflow_modal_configpanel_title',\n                    component: 'block_opencast'\n                },\n                {\n                    key: 'unarchiveuploadjob',\n                    component: 'block_opencast'\n                },\n                {\n                    key: 'unarchiveuploadjobconfirmtext',\n                    component: 'block_opencast'\n                },\n                {\n                    key: 'unarchiveuploadjobconfirmbtn_save',\n                    component: 'block_opencast'\n                },\n                {\n                    key: 'videostable_massaction_startworkflow_modal_body',\n                    component: 'block_opencast'\n                },\n                {\n                    key: 'videostable_massaction_startworkflow_modal_title',\n                    component: 'block_opencast'\n                }\n            ];\n            str.get_strings(strings).then(function(results) {\n                initWorkflowModal(ocinstanceid, courseid, results, contextid, liveupdate);\n                initReportModal(ocinstanceid, courseid, results, contextid, liveupdate);\n                initUnarchiveUploadJobModal(ocinstanceid, results, contextid, liveupdate);\n                return;\n            }).catch(Notification.exception);\n            window.addEventListener('message', function(event) {\n                if (event.origin !== \"null\") {\n                    return;\n                }\n\n                if (event.data === parseInt(event.data)) {\n                    $('#config-frame').height(event.data);\n                } else {\n                    $('#configparams').val(event.data);\n                    $('#startWorkflowForm').submit();\n                }\n            });\n            if (liveupdate.enabled) {\n                initLiveUpdate(ocinstanceid, contextid, liveupdate.timeout);\n            }\n            initCopyAccessLinkToClipboard();\n        };\n\n        return {\n            init: init\n        };\n    });\n\n"],"names":["define","$","ModalFactory","ModalEvents","str","url","Notification","Toast","Ajax","window","liveUpdateInterval","liveUpdateItemsWithError","liveUpdateState","pauseLiveUpdate","liveupdate","enabled","clearInterval","resumeLiveUpdate","ocinstanceid","contextid","initLiveUpdate","timeout","displayWorkflowPrivacyNotice","privacyworkflows","workflowid","Array","isArray","length","includes","removeClass","addClass","displayWorkflowDescription","workflowobj","description","html","displayWorkflowConfigPanel","courseid","attr","configpanelsrc","relativeUrl","ajax","success","data","trim","async","reloadtimeout","getLiveUpdateItems","setInterval","processingItems","getLiveUpdateProcessingItems","uploadingItems","getLiveUpdateUploadingItems","processingItem","liveUpdatePerformAjax","uploadingItem","titles","join","get_string","done","result","addNotification","message","type","fail","exception","concat","itemsNodeList","document","getElementsByName","from","item","identifier","value","title","dataset","undefined","push","remove","call","methodname","args","status","statusObject","JSON","parse","replace","replaceLiveUpdateInfo","stringparams","add","setTimeout","location","reload","newDiv","createElement","innerHTML","replaceElm","firstChild","nodeName","parentNode","newText","createTextNode","insertBefore","previousElementSibling","prevElm","areElementsEqual","baseElm","checkElm","isEqual","attributes","getAttributeNames","attributeName","baseAttributeValue","getAttribute","checkAttributeValue","hasAttribute","resetVideosTableBulkActions","container","disabled","dropdowns","querySelectorAll","forEach","dropdown","init","get_strings","key","component","then","results","langstrings","getElementById","workflows","text","privacyinfohtml","privacytitle","hasprivacyinfo","on","e","preventDefault","detail","clickedVideo","currentTarget","actionurl","ismassaction","bulkinfodiv","massactioncontainer","selectedids","table","querySelector","tableid","id","seriesid","selectedtitles","videoid","select","workflow","privacynoticediv","workflowdescdiv","workflowconfigpaneldiv","body","create","types","SAVE_CANCEL","modal","setSaveButtonText","root","getRoot","save","is","contentWindow","postMessage","submit","hidden","destroy","show","workflowselect","val","change","this","catch","initWorkflowModal","initReportModal","uploadjobid","initUnarchiveUploadJobModal","addEventListener","event","origin","parseInt","height","link","navigator","clipboard","writeText","autohide","closeButton"],"mappings":"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"}