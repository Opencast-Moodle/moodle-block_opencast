{"version":3,"file":"block_manage_series.min.js","sources":["../src/block_manage_series.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript to initialise the opencast block settings.\n *\n * @module     block/opencast\n * @copyright  2021 Tamara Gunkel, University of MÃ¼nster\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Tabulator from 'block_opencast/tabulator';\nimport $ from 'jquery';\nimport * as str from 'core/str';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Fragment from 'core/fragment';\nimport Ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\n\n/**\n * Get the Body.\n *\n * @param {string} contextid\n * @param {string} ocinstanceid\n * @param {string} seriesid\n * @param {string|undefined} formdata\n * @return {Deferred} new promise that is resolved with the html and js of the Body.\n */\nfunction getBody(contextid, ocinstanceid, seriesid, formdata) {\n    if (typeof formdata === 'undefined') {\n        formdata = \"\";\n    }\n\n    var params = {ocinstanceid: ocinstanceid, seriesid: seriesid, jsonformdata: formdata};\n    return Fragment.loadFragment('block_opencast', 'series_form', contextid, params);\n}\n\n/**\n * @param {any} e\n */\nfunction submitFormAjax(e) {\n    e.preventDefault();\n    var modal = e.data.modal;\n    var contextid = e.data.contextid;\n    var seriestable = window.seriestable;\n    var edited = e.data.edited;\n    var numseriesallowed = e.data.numseriesallowed;\n\n    var changeEvent = document.createEvent('HTMLEvents');\n    changeEvent.initEvent('change', true, true);\n\n    // Run validation functions.\n    modal.getRoot().find(':input').each(function(index, element) {\n        element.dispatchEvent(changeEvent);\n    });\n\n    // Check if there are invalid fields.\n    var invalid = $.merge(\n        modal.getRoot().find('[aria-invalid=\"true\"]'),\n        modal.getRoot().find('.error')\n    );\n\n    if (invalid.length) {\n        invalid.first().focus();\n        return;\n    }\n\n    // Convert all the form elements values to a serialised string.\n    var formData = modal.getRoot().find('form').serialize();\n    var seriestitle = $('.modal #id_title').val();\n\n    // Submit form.\n    Ajax.call([{\n        methodname: 'block_opencast_submit_series_form',\n        args: {contextid: contextid, ocinstanceid: e.data.ocinstanceid, seriesid: e.data.seriesid, jsonformdata: formData},\n        done: function(newseries) {\n            modal.destroy();\n            if (edited) {\n                let row = seriestable.getRows().find(r => r.getData().series === e.data.seriesid);\n                row.update({\"seriesname\": seriestitle});\n            } else {\n                var s = JSON.parse(newseries);\n                seriestable.addRow({'seriesname': s.seriestitle, 'series': s.series, 'isdefault': s.isdefault});\n\n                if (seriestable.getRows().length >= numseriesallowed) {\n                    $(\"#createseries\").hide();\n                    $(\"#importseries\").hide();\n                }\n            }\n        },\n        fail: function(er) {\n            if (er.errorcode === 'metadataseriesupdatefailed') {\n                modal.destroy();\n                displayError(er.message);\n            } else {\n                modal.setBody(getBody(contextid, e.data.ocinstanceid, e.data.seriesid, formData));\n            }\n        }\n    }]);\n}\n\n/**\n * Displays an errormessage.\n *\n * @param {string} message\n */\nfunction displayError(message) {\n    var context = {\n        announce: true,\n        closebutton: true,\n        extraclasses: \"\",\n        message: message\n    };\n\n    Templates.render(\"core/notification_error\", context).then(function(m) {\n        $('#user-notifications').append(m);\n        return;\n    }).fail(function() {\n        Notification.alert(message, message);\n    });\n}\n\n/**\n * Loads series titles.\n *\n * @param {int} contextid\n * @param {int} ocinstanceid\n * @param {any} series\n * @param {any} seriestable\n * @param {any} row\n */\nfunction loadSeriesTitles(contextid, ocinstanceid, series, seriestable, row) {\n    Ajax.call([{\n        methodname: 'block_opencast_get_series_titles',\n        args: {contextid: contextid, ocinstanceid: ocinstanceid, series: JSON.stringify(series)},\n        done: function(data) {\n            var titles = JSON.parse(data);\n            if (seriestable !== null) {\n                seriestable.getRows().forEach(function(row) {\n                    row.update({\"seriesname\": titles[row.getData().series]});\n                });\n            } else {\n                row.update({\"seriesname\": titles[row.getData().series]});\n            }\n\n        },\n        fail: function(error) {\n            // Show error.\n            if (seriestable !== null) {\n                seriestable.getRows().forEach(function(row) {\n                    row.update({\"seriesname\": error.message});\n                });\n            } else {\n                row.update({\"seriesname\": error.message});\n            }\n        }\n    }]);\n}\n\nexport const init = (contextid, ocinstanceid, createseries, series, numseriesallowed) => {\n\n    // Load strings\n    var strings = [\n        {key: 'seriesname', component: 'block_opencast'},\n        {key: 'form_seriesid', component: 'block_opencast'},\n        {key: 'default', component: 'block_opencast'},\n        {key: 'noconnectedseries', component: 'block_opencast'},\n        {key: 'createseriesforcourse', component: 'block_opencast'},\n        {key: 'delete_series', component: 'block_opencast'},\n        {key: 'delete_confirm_series', component: 'block_opencast'},\n        {key: 'editseries', component: 'block_opencast'},\n        {key: 'delete', component: 'moodle'},\n        {key: 'loading', component: 'block_opencast'},\n        {key: 'importseries', component: 'block_opencast'},\n        {key: 'importfailed', component: 'block_opencast'},\n        {key: 'form_seriesid', component: 'block_opencast'},\n        {key: 'setdefaultseries_heading', component: 'block_opencast'},\n        {key: 'setdefaultseries', component: 'block_opencast'}\n    ];\n    str.get_strings(strings).then(function(jsstrings) {\n        // Style hidden input.\n        var seriestable = new Tabulator(\"#seriestable\", {\n            data: series,\n            layout: \"fitColumns\",\n            placeholder: jsstrings[3],\n            headerSort: false,\n            dataLoaded: function(data) {\n                // Load series titles.\n                loadSeriesTitles(contextid, ocinstanceid, data.map(x => x.series), this);\n            },\n            columns: [\n                {title: jsstrings[0], field: \"seriesname\", editable: false},\n                {title: jsstrings[1], field: \"series\", editable: false},\n                {\n                    title: jsstrings[2], field: \"isdefault\",\n                    hozAlign: \"center\",\n                    widthGrow: 0,\n                    formatter: function(cell) {\n                        var input = document.createElement('input');\n                        input.type = 'radio';\n                        input.name = 'defaultseries';\n                        input.checked = cell.getValue();\n                        input.classList.add('ignoredirty');\n                        input.addEventListener('click', function(e) {\n                            e.preventDefault();\n                            ModalFactory.create({\n                                type: ModalFactory.types.SAVE_CANCEL,\n                                title: jsstrings[13],\n                                body: jsstrings[14]\n                            })\n                                .then(function(modal) {\n                                    modal.getRoot().on(ModalEvents.hidden, function() {\n                                        modal.destroy();\n                                    });\n\n                                    modal.getRoot().on(ModalEvents.save, function() {\n                                        Ajax.call([{\n                                            methodname: 'block_opencast_set_default_series',\n                                            args: {contextid: contextid, ocinstanceid: ocinstanceid,\n                                                seriesid: cell.getRow().getData().series},\n                                            done: function() {\n                                                modal.destroy();\n                                                cell.getTable().getRows().forEach(function(row) {\n                                                    if (row === cell.getRow()) {\n                                                        row.update({'isdefault': 1});\n                                                    } else {\n                                                        row.update({'isdefault': 0});\n                                                    }\n                                                });\n                                            },\n                                            fail: function(e) {\n                                                modal.destroy();\n                                                displayError(e.message);\n                                            }\n                                        }]);\n                                    });\n                                    modal.show();\n                                    return;\n                                }).catch(Notification.exception);\n                        });\n                        return input;\n                    }\n                },\n                {\n                    title: \"\", width: 40, headerSort: false, hozAlign: \"center\", formatter:\n                        function() {\n                            return '<i class=\"icon fa fa-edit fa-fw\"></i>';\n                        },\n                    cellClick: function(_, cell) {\n                        ModalFactory.create({\n                            type: ModalFactory.types.SAVE_CANCEL,\n                            title: jsstrings[7],\n                            body: getBody(contextid, ocinstanceid, cell.getRow().getCell(\"series\").getValue())\n                        })\n                            .then(function(modal) {\n                                modal.setSaveButtonText(jsstrings[7]);\n                                modal.setLarge();\n\n                                // Reset modal on every open event.\n                                modal.getRoot().on(ModalEvents.hidden, function() {\n                                    modal.destroy();\n                                });\n\n                                // We want to hide the submit buttons every time it is opened.\n                                modal.getRoot().on(ModalEvents.shown, function() {\n                                    modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                                });\n\n                                modal.getRoot().on(ModalEvents.save, function(e) {\n                                    e.preventDefault();\n                                    modal.getRoot().find('form').submit();\n                                });\n                                modal.getRoot().on('submit', 'form', {\n                                    'modal': modal,\n                                    'contextid': contextid,\n                                    'ocinstanceid': ocinstanceid,\n                                    'seriesid': cell.getRow().getCell(\"series\").getValue(),\n                                    'numseriesallowed': numseriesallowed,\n                                    'edited': true\n                                }, submitFormAjax);\n\n                                modal.show();\n                                return;\n                            }).catch(Notification.exception);\n                    }\n                },\n                {\n                    title: \"\", width: 40, headerSort: false, hozAlign: \"center\", formatter:\n                        function() {\n                            return '<i class=\"icon fa fa-trash fa-fw\"></i>';\n                        },\n                    cellClick: function(e, cell) {\n                        ModalFactory.create({\n                            type: ModalFactory.types.SAVE_CANCEL,\n                            title: jsstrings[5],\n                            body: jsstrings[6]\n                        })\n                            .then(function(modal) {\n                                modal.setSaveButtonText(jsstrings[8]);\n                                modal.getRoot().on(ModalEvents.save, function() {\n                                    Ajax.call([{\n                                        methodname: 'block_opencast_unlink_series',\n                                        args: {contextid: contextid, ocinstanceid: ocinstanceid,\n                                            seriesid: cell.getRow().getData().series},\n                                        done: function(result) {\n                                            modal.destroy();\n                                            let res = JSON.parse(result);\n                                            if (res.error) {\n                                                displayError(res.message);\n                                            } else {\n                                                cell.getRow().delete();\n                                                const createseries = $(\"#createseries\");\n                                                const importseries = $(\"#importseries\");\n                                                createseries.show();\n                                                createseries.removeClass('d-none');\n                                                importseries.show();\n                                                importseries.removeClass('d-none');\n                                            }\n                                        },\n                                        fail: function(e) {\n                                            modal.destroy();\n                                            displayError(e.message);\n                                        }\n                                    }]);\n                                });\n                                modal.show();\n                                return;\n                            }).catch(Notification.exception);\n                    }\n                }\n            ],\n        });\n\n        window.seriestable = seriestable;\n\n        // Create new series in modal\n        // Button for connection a new series\n        $('#createseries').click(function() {\n            ModalFactory.create({\n                type: ModalFactory.types.SAVE_CANCEL,\n                title: jsstrings[4],\n                body: getBody(contextid, ocinstanceid, '', undefined)\n            })\n                .then(function(modal) {\n                    modal.setSaveButtonText(jsstrings[4]);\n                    modal.setLarge();\n\n                    modal.getRoot().on(ModalEvents.hidden, function() {\n                        modal.destroy();\n                    });\n\n                    // We want to hide the submit buttons every time it is opened.\n                    modal.getRoot().on(ModalEvents.shown, function() {\n                        modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                    });\n\n                    modal.getRoot().on(ModalEvents.save, function(e) {\n                        e.preventDefault();\n                        modal.getRoot().find('form').submit();\n                    });\n                    modal.getRoot().on('submit', 'form', {\n                        'modal': modal,\n                        'contextid': contextid,\n                        'ocinstanceid': ocinstanceid,\n                        'seriesid': '',\n                        'numseriesallowed': numseriesallowed,\n                        'edited': false\n                    }, submitFormAjax);\n\n                    modal.show();\n                    return;\n                }).catch(Notification.exception);\n\n        });\n\n        // Import new series in modal\n        $('#importseries').click(function() {\n            let context = {\n                label: jsstrings[12],\n                required: false,\n                advanced: false,\n                element: {\n                    wrapperid: \"importseriesid_wrapper\",\n                    name: 'importseriesid',\n                    id: 'importseriesid',\n                    type: 'text',\n                    size: 40,\n                    value: ''\n                }\n            };\n\n            ModalFactory.create({\n                type: ModalFactory.types.SAVE_CANCEL,\n                title: jsstrings[10],\n                body: Templates.render(\"core_form/element-text\", context)\n            })\n                .then(function(modal) {\n                    modal.setSaveButtonText(jsstrings[10]);\n                    modal.setLarge();\n\n                    modal.getRoot().on(ModalEvents.hidden, function() {\n                        modal.destroy();\n                    });\n\n                    modal.getRoot().on(ModalEvents.save, function(e) {\n                        e.preventDefault();\n                        var seriesid = $('#importseriesid').val();\n\n                        // Submit form.\n                        Ajax.call([{\n                            methodname: 'block_opencast_import_series',\n                            args: {contextid: contextid, ocinstanceid: ocinstanceid, seriesid: seriesid},\n                            done: function(newseries) {\n                                modal.destroy();\n                                if (seriestable !== undefined) {\n                                    var s = JSON.parse(newseries);\n                                    seriestable.addRow({'seriesname': s.title, 'series': s.id, 'isdefault': s.isdefault});\n\n                                    if (seriestable.getRows().length >= numseriesallowed) {\n                                        $(\"#createseries\").hide();\n                                        $(\"#importseries\").hide();\n                                    }\n                                }\n                            },\n                            fail: function() {\n                                modal.destroy();\n                                displayError(jsstrings[11]);\n                            }\n                        }]);\n                    });\n\n                    modal.show();\n                    return;\n                }).catch(Notification.exception);\n        });\n\n        // Perform click on createseries\n        if (createseries) {\n            $('#createseries').trigger('click');\n        }\n        return;\n    }).catch(Notification.exception);\n};\n\n"],"names":["getBody","contextid","ocinstanceid","seriesid","formdata","params","jsonformdata","Fragment","loadFragment","submitFormAjax","e","preventDefault","modal","data","seriestable","window","edited","numseriesallowed","changeEvent","document","createEvent","initEvent","getRoot","find","each","index","element","dispatchEvent","invalid","$","merge","length","first","focus","formData","serialize","seriestitle","val","call","methodname","args","done","newseries","destroy","getRows","r","getData","series","update","s","JSON","parse","addRow","isdefault","hide","fail","er","errorcode","displayError","message","setBody","context","announce","closebutton","extraclasses","render","then","m","append","alert","createseries","str","get_strings","key","component","jsstrings","Tabulator","layout","placeholder","headerSort","dataLoaded","row","stringify","titles","forEach","error","loadSeriesTitles","map","x","this","columns","title","field","editable","hozAlign","widthGrow","formatter","cell","input","createElement","type","name","checked","getValue","classList","add","addEventListener","create","ModalFactory","types","SAVE_CANCEL","body","on","ModalEvents","hidden","save","getRow","getTable","show","catch","Notification","exception","width","cellClick","_","getCell","setSaveButtonText","setLarge","shown","submit","result","res","delete","importseries","removeClass","click","undefined","label","required","advanced","wrapperid","id","size","value","Templates","trigger"],"mappings":"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"}